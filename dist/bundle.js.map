{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/pokersolver/pokersolver.js","webpack:///./src/index.js","webpack:///./src/playerLogic/humanplayer.js","webpack:///./src/pokerLogic/deck.js","webpack:///./src/pokerLogic/holdem.js","webpack:///./src/pokerLogic/table.js"],"names":["$","actionsCont","game","HoldEm","newGame","HumanPlayer","position","chipstack","folded","chipsInPot","hand","side","name","input","textSelect","document","querySelector","innerText","promptSelect","to_call","text","promptText","sb","resolve_action","toLowerCase","startsWith","wager","Number","split","playerName","playerChips","Deck","cards_drawn","cards","newDeck","array","counter","length","index","Math","floor","random","temp","suits","values","deck","i","j","push","shuffle","pop","card","unshift","$el","initialChipstack","players","dealer_pos","table","Table","playHand","shift","render","togglePlayers","resetPlayerVars","resetVars","Hand","require","bb","boardCards","pot","currPlayerPos","dealInPlayers","takeBlinds","bettingRound","remainingPlayers","console","log","dealFlop","showBoard","allIn","dealTurn","dealRiver","determineWinner","hand1","solve","concat","hand2","winners","tie","winner","descr","winHand","loseHand","winPos","losePos","player","playerHand","join","draw","dealCard","forEach","ifSB","firstBet","pAction","toggleCurrPlayer","prevBet","resolveAddBets","bet","promptAction","toCall","action","currPot","setActions","showPot","$outDiv","$foldDiv","data","append","$callDiv","$betDiv"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,KAAK;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,KAAK;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,KAAK;AACrB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA,+B;AACA,SAAS;AACT,kC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0EAA0E;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,YAAY,KAAK;AACjB;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,kBAAkB;AAClC,gBAAgB,kBAAkB;AAClC,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,iDAAiD,KAAK;AACtD,gBAAgB,MAAM;AACtB,iDAAiD,KAAK;AACtD,gBAAgB,kBAAkB;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gDAAgD,KAAK;AACrD,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;A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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n\n(function() {\n  'use strict';\n\n  // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n  /**\n   * Base Card class that defines a single card.\n   */\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    }\n\n    // TODO: Add a parameter to leave out the suit and update the this.descr calls.\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true;\n\n      // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      }\n      \n      // Get rank based on game.\n      var handRank = this.game.handValues.length;\n      for (var i=0; i<this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n      this.rank = handRank - i;\n\n      // Set up the pool of cards.\n      this.cardPool = cards.map(function(c) {\n        return (typeof c === 'string') ? new Card(c) : c;\n      });\n\n      // Fix the card ranks for wild cards, and sort.\n      for (var i=0; i<this.cardPool.length; i++) {\n        card = this.cardPool[i];\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n      this.cardPool = this.cardPool.sort(Card.sort);\n\n      // Create the arrays of suits and values.\n      var obj, obj1, key, key1, card;\n      for (var i=0; i<this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i];\n\n        // We do something special if this is a wild card.\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []);\n\n          // Add the value to the array for that type in the object.\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n      for (var i=0; i<=4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n    loseTo(hand) {\n      return (this.compare(hand) > 0);\n    }\n\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = (cards) ? cards.length : 0;\n\n      for (var i=0; i<this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i=0; i<this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j=0;\n          while (j<values.length && j<cards.length) {\n            if (cards[j].rank === values.length-1-j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n          wild.rank = values.length-1-j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n    resetWildCards() {\n      for (var i=0; i<this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n\n      picks = this.cardPool.filter(function(card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      });\n\n      // Account for remaining wild card when it must be ace.\n      if (this.game.wildStatus === 0) {\n        for (var i=0; i<picks.length; i++) {\n          var card = picks[i];\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n    toString() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards.join(', ');\n    }\n\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n    toArray() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards;\n    }\n\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return (this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0);\n    }\n\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n    static winners(hands) {\n      hands = hands.filter(function(h) {\n        return h.qualifiesHigh();\n      });\n\n      var highestRank = Math.max.apply(Math, hands.map(function(h) {\n        return h.rank;\n      }));\n\n      hands = hands.filter(function(h) {\n        return h.rank === highestRank;\n      });\n\n      hands = hands.filter(function(h) {\n        var lose = false;\n        for (var i=0; i<hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n\n      return hands;\n    }\n\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = (typeof game === 'string') ? new Game(game) : game;\n      cards = cards || [''];\n\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i=0; i<hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i=0; i<cards.length; i++) {\n        card = cards[i];\n        if (card.rank === -1) {\n          wilds.push(cards[i]);  \n        } else {\n          nonWilds.push(cards[i]);  \n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        } \n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n        var straight = new Straight(possibleStraight, this.game);\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<5; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i=0; i<this.values.length; i++) {\n          var cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards();\n\n      // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n        if (this.cards.length) {\n          var wildCount = 0;\n          for (var i=0; i<this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n          this.cards = this.cards.sort(Card.sort);\n          for (; wildCount<this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n          return true;\n        }\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps();\n\n      // Now add the wild cards, if any, and set the appropriate ranks\n      for (var i=0; i<this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < (values.length - 1)) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j=1; j<this.cards.length; j++) {\n            if (this.cards[j-1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j-1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n        this.cards = this.cards.sort(Card.sort);\n      }\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength-1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n      for (; i>0; i--) {\n        cardsList = [];\n        gapCount = 0;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          prevCard = cardsList[cardsList.length - 1];\n          diff = (prevCard) ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < (gapCount + diff + cardsList.length)) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += (diff - 1);\n          }\n        }\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      wheelCards = [];\n      wildCount = 0;\n      for (i = this.game.sfQualify-1; i>=0; i--) {\n        cardFound = false;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          if (card.rank < i) {\n            break;\n          }\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n          for (var j=0; j<this.wilds.length && this.cards.length<2; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i=0; i<this.cards.length; i++) {\n        var card = this.cards[i];\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n\n      return true;\n    }\n  }\n\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [\n        new StraightFlush(cards, new Game('paigowpokersf7')),\n        new StraightFlush(cards, new Game('paigowpokersf6')),\n        new StraightFlush(cards, this.game),\n        new Flush(cards, new Game('paigowpokersf7')),\n        new Flush(cards, new Game('paigowpokersf6')),\n        new Flush(cards, this.game),\n        new Straight(cards, new Game('paigowpokersf7')),\n        new Straight(cards, new Game('paigowpokersf6')),\n        new Straight(cards, this.game)\n      ];\n\n      for (var i=0; i<handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || (bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank)) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        }\n        // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]);\n\n      // In Pai Gow Poker, Banker takes any equal valued hands.\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        }\n        // Player wins hi, Banker wins lo; push\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      }\n\n      // Banker wins both; banker wins\n      return -1;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n      fullHand = fullHand.concat(hiHand.cardPool);\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n      fullHand = fullHand.concat(loHand.cardPool);\n\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n\n      return result;\n    }\n\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n\n      return result;\n    }\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null;\n\n      // Set values based on the game rules.\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  }\n\n  // Export the classes for node.js use.\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  }\n\n  // Add the classes to the window for browser use.\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n\n})();","import HoldEm from './pokerLogic/holdem';\n\n$(() => {\n  const actionsCont = $('.table-actions');\n  const game = new HoldEm(actionsCont);\n  game.newGame();\n});\n\n// $(() => {\n//   const rootEl = $('.ttt');\n//   const game = new Game();\n//   new View(game, rootEl);\n// });\n\n// import React from \"react\";\n// import ReactDom from \"react-dom\";\n// import App from \"../dist/App\"\n\n// const Root = () => {\n//   return (\n//     // <App />\n//   )\n// }\n\n// ReactDOM.render(element, document.getElementById('root'));\n\n// ReactDOM.render(<h1>Hello Poker world!</h1>, document.getElementById(\"root\"));\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   const game = new HoldEm;\n//   game.newGame();\n//   console.log(\"Game Over!\");\n// })\n\n\n\n","export default class HumanPlayer {\n  constructor(position, chipstack){\n    this.position = position;\n    this.chipstack = chipstack;\n    this.folded = false;\n    this.chipsInPot = 0;\n    this.hand = [];\n    (position === 'sb') ? this.side = 'right' : this.side = 'left';\n    (this.side === 'right') ? this.name = 'Seat 1' : this.name = 'Seat 2';\n  }\n\n  text(input){\n    let textSelect = document.querySelector(\".table-actions-text\");\n    textSelect.innerText = input;\n  }\n\n  promptText(input){\n    let promptSelect = document.querySelector(\".table-actions-prompt\");\n    promptSelect.innerText = input;\n  }\n\n  promptAction(to_call){\n    this.text(`${this.name}, your hand is ${this.hand[0]} ${this.hand[1]}`)\n    // console.log(`${this.name}, you have ${this.chipstack} chips, your hand is ${this.hand[0]} ${this.hand[1]}`)\n    // let input;\n    if (to_call === 0) {\n      this.promptText(`${this.name}, enter 'check', 'fold', or 'bet' followed by an amount i.e. 'bet 100'`)\n      // input = prompt(`${this.name}, enter 'check', 'fold', or 'bet' followed by an amount i.e. 'bet 100'`);\n    } else {\n      this.promptText(`It costs ${to_call} to call. Enter 'call', 'fold', 'raise' followed by an amount i.e. 'raise 300'`)\n      // input = prompt(`It costs ${to_call} to call. Enter 'call', 'fold', 'raise' followed by an amount i.e. 'raise 300'`);\n    }\n  }\n\n  action(to_call, sb = 0){\n    // while (document.querySelector(\".input\").innerText.length === 0) {\n    // }\n    let input = document.querySelector(\".input\").innerText;\n    // console.log(input);\n    return this.resolve_action(to_call, input, sb);\n  }\n\n  resolve_action(to_call, input, sb){\n    input = input.toLowerCase();\n    if (!input === \"ch\" &&  !input === \"ca\" && input === !\"bet\" && !input === \"ra\") {\n      throw \"Invalid input provided\";\n    }\n    if (input.startsWith('ch')) return [0, 'check'];\n    let wager = Number(input.split(\" \")[1]);\n    if (input.startsWith(\"ca\")) {\n      this.chipstack -= to_call;\n      this.chipsInPot -= to_call;\n      return [to_call, 'call']\n    } else if (input.startsWith(\"bet\")) {\n      this.chipstack -= wager;\n      this.chipsInPot -= sb;\n      return [wager, 'bet']\n    } \n    if (input.startsWith(\"ra\")) {\n      this.chipstack -= wager + sb;\n      this.chipsInPot = this.chipsInPot - sb;\n      return [wager - to_call, 'raise']\n    }\n    if (input.startsWith('fo')) {\n      this.folded = true;\n      return null;\n    }\n  }\n\n  playerName() {\n    let playerName = document.querySelector(`.player-info-name-${this.side}`);\n    playerName.innerText = `${this.name}`;\n  }\n\n  playerChips() {\n    let playerChips = document.querySelector(`.player-info-chips-${this.side}`);\n    playerChips.innerText = `${this.chipstack} chips`\n  }\n\n  render(){\n    this.playerName();\n    this.playerChips();\n  }\n}","// DISP_SUITS = [\"\\u2660\", \"\\u2661\", \"\\u2662\", \"\\u2663\"]\nexport default class Deck {\n  constructor(){\n    this.cards_drawn = 0;\n    this.cards = this.newDeck();\n  }\n\n  shuffle(array){\n    let counter = array.length;\n\n    while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n    }\n    return array;\n  }\n\n  newDeck(){\n    let suits = [\"s\", \"h\", \"d\", \"c\"];\n    let values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\"];\n    let deck = [];\n    for (let i = 0; i < suits.length; i++) {\n      for (let j = 0; j < values.length; j++) {\n        deck.push(values[j] + suits[i]);\n      }\n    }\n    // const response = prompt(\"enter action\");\n    // console.log(response);\n    return this.shuffle(deck);\n  }\n\n  draw(){\n    if (this.cards_drawn % 52 == 0) {\n      this.cards = this.shuffle(this.cards);\n    }\n    this.cards_drawn += 1;\n    return this.cards.pop();\n  }\n\n  returnCard(card){\n    this.cards.unshift(card);\n  }\n}","import Table from \"./table\";\nimport HumanPlayer from \"../playerLogic/humanplayer\";\n\nclass HoldEm {\n  constructor($el, initialChipstack = 1500) {\n    this.$el = $el;\n    this.initialChipstack = initialChipstack;\n    this.players = [new HumanPlayer(\"sb\", initialChipstack), new HumanPlayer(\"bb\", initialChipstack)];\n    this.dealer_pos = 0;\n    this.table = new Table($el, this.players);\n  }\n\n  playHand(){\n    this.table.playHand();\n  }\n\n  togglePlayers(){\n    this.players.push(this.players.shift());\n    if (this.players[0].position === 1) {\n      this.players[0].position = 2;\n      this.players[1].position = 1;\n    } else {\n      this.players[0].position = 1;\n      this.players[1].position = 2;\n    }\n  }\n\n  resetPlayerVars() {\n    this.players[0].folded = false;\n    this.players[0].chipsInPot = 0;\n    this.players[0].hand = [];\n    this.players[1].folded = false;\n    this.players[1].chipsInPot = 0;\n    this.players[1].hand = [];\n  }\n\n  render(){\n    this.table.render();\n    // this.players[0].render();\n    // this.players[1].render();\n  }\n\n  newGame(){\n    while (this.players[0].chipstack > 0 && this.players[1].chipstack > 0) {\n    this.render();\n    this.playHand();\n      this.togglePlayers();\n      this.resetPlayerVars();\n      this.table.resetVars();\n    }\n    if (this.players[0].chipstack === 0) {\n      \"Seat 2 has won the match!\"\n    } else {\n      \"Seat 1 has won the match!\"\n    }\n  }\n\n}\n\n// <div class=\"actions-cont\">\n//   <div class=\"actions-cont-text\" id=\"fold\">FOLD</div>\n//   <div class=\"actions-cont-text\" id=\"check-call\">CHECK/CALL</div>\n//   <div class=\"actions-cont-text\" id=\"bet-raise\">BET/RAISE</div>\n//   <input class=\"actions-cont-bet-amt\" type=\"number\" value=\"0\">\n// </div>\n\nexport default HoldEm;\n","import Deck from \"./deck.js\";\nconst Hand = require('pokersolver').Hand;\n\nclass Table {\n  constructor($el, players, sb = 50, bb = 100){\n    this.boardCards = [];\n    this.deck = new Deck;\n    this.players = players;\n    this.sb = sb;\n    this.bb = bb;\n    this.pot = 0;\n    this.currPlayerPos = 0;\n    this.$el = $el;\n  }\n\n  resetVars(){\n    this.boardCards = [];\n    this.pot = 0;\n    this.currPlayerPos = 0;\n  }\n\n  playHand(){\n    this.dealInPlayers();\n    this.takeBlinds();\n    this.bettingRound(this.sb);\n    if (this.remainingPlayers()) {\n      console.log(\"*******-FLOP-*******\");\n      this.dealFlop();\n      this.showBoard();\n      if (!this.allIn()) this.bettingRound();\n    }\n    if (this.remainingPlayers()) {\n      console.log(\"*******-TURN-*******\");\n      this.dealTurn();\n      this.showBoard();\n      if (!this.allIn()) this.bettingRound();\n    }\n    if (this.remainingPlayers()) {\n      console.log(\"*******-RIVER-*******\");\n      this.dealRiver();\n      this.showBoard();\n      if (!this.allIn()) this.bettingRound();\n    }\n    this.determineWinner();\n  }\n\n  anyFolds(){\n    if (!this.players[0].folded && !this.players[1].folded) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  determineWinner(){\n    var hand1 = Hand.solve(this.players[0].hand.concat(this.boardCards));\n    var hand2 = Hand.solve(this.players[1].hand.concat(this.boardCards));\n    (this.boardCards.length > 0) ? console.log(`On a board of ${this.boardCards}, `) : console.log(`Preflop, `);\n    var winners = Hand.winners([hand1, hand2]);\n    if (!this.players[0].folded && !this.players[1].folded && winners.length === 2){\n      return this.tie(hand1);\n    } else if (this.players[1].folded || (!this.players[0].folded && winners[0] === hand1)) {\n      return this.winner(hand1, hand2, 0, 1);\n    } else {\n      return this.winner(hand2, hand1, 1, 0);\n    }\n  }\n\n  tie(hand){\n    console.log(`the hand resulted in a tie. Splitting the pot of ${this.pot} with ${hand.descr}!`)\n    this.players[0].chipstack += Math.floor(this.pot / 2);\n    this.players[1].chipstack += Math.floor(this.pot / 2);\n    if (!this.pot % 2 === 0) {\n      if (Math.random() < .5) {\n        this.players[0].chipstack += 1;\n      } else {\n        this.players[1].chipstack += 1;\n      }\n    }\n    return [2];\n  }\n\n  winner(winHand, loseHand, winPos,losePos){\n    console.log(`${this.players[winPos].name} wins the pot of ${this.pot}`)\n    if (!this.players[losePos].folded) console.log(` with hand: ${winHand.descr}`)\n    if (!this.players[losePos].chipstack === 0) console.log(`${this.players[losePos].name} lost with with hand: ${loseHand.descr}`)\n    this.players[winPos].chipstack += this.pot;\n    return [winPos];\n  }\n\n  handToStr(player){\n    let playerHand = player.hand.join(\" \");\n    return playerHand;\n  }\n\n  dealInPlayers(){\n    this.players[1].hand.push(this.deck.draw());\n    this.players[0].hand.push(this.deck.draw());\n    this.players[1].hand.push(this.deck.draw());\n    this.players[0].hand.push(this.deck.draw());\n  }\n\n  takeBlinds(){\n    this.players[0].chipstack -= this.sb;\n    this.players[0].chipsInPot = this.sb;\n    this.players[1].chipstack -= this.bb;\n    this.players[1].chipsInPot = this.bb;\n    this.pot = this.sb + this.bb;\n  }\n\n  dealCard(){\n    this.boardCards.push(this.deck.draw());\n  }\n\n  dealFlop(){\n    this.currPlayerPos = 1;\n    for(let i=0;i<3;i++){\n      this.dealCard();\n    }\n  }\n\n  dealTurn(){\n    this.currPlayerPos = 1;\n    this.dealCard();\n  }\n\n  dealRiver(){\n    this.currPlayerPos = 1;\n    this.dealCard();\n  }\n\n  showBoard(){\n    console.log(\"The board is: \");\n    this.boardCards.forEach(card => {\n      console.log(card);\n    })\n  }\n\n  bettingRound(ifSB = 0){\n    this.render();\n    const firstBet = this.pAction(ifSB, ifSB);\n    if (firstBet === null) {\n      return this.pot;\n    }\n    this.pot += firstBet[0];\n    this.toggleCurrPlayer();\n    this.render();\n    const prevBet = this.pAction(firstBet[0] - ifSB);\n    if (prevBet === null) {\n      return this.pot;\n    }\n    this.pot += prevBet[0];\n    if (prevBet[1] === 'raise' && ifSB > 0) {\n      this.pot += firstBet[0];\n    }\n    this.resolveAddBets(prevBet);\n    return this.pot;\n  }\n\n  resolveAddBets(prevBet){\n    if (prevBet[1].startsWith('ra')) {\n      this.pot += prevBet[0];\n    }\n    while (!this.players[0].chipsInPot === this.players[0].chipsInPot) {\n      this.render();\n      this.toggleCurrPlayer();\n      const bet = this.pAction(prevBet[0]);\n      if (bet[1].startsWith('ra')) {\n        this.pot += prevBet[0];\n      }\n      if (bet) {\n        this.pot += bet[0];\n      }\n    }\n  }\n\n  pAction(bet = 0, sb = 0){\n    this.players[this.currPlayerPos].promptAction();\n    const toCall = this.players[this.currPlayerPos].action(bet,this.bb);\n   \n    if (!toCall) this.players[this.currPlayerPos].folded = true;\n    return toCall\n  }\n\n  toggleCurrPlayer(){\n    if (this.currPlayerPos === 0){\n      this.currPlayerPos = 1;\n    } else  {\n      this.currPlayerPos = 0;\n    }\n  }\n\n  remainingPlayers() {\n    if (this.players[0].folded === true || this.players[1].folded === true) return false;\n    \n    return true;\n  }\n  \n  allIn() {\n    if (this.players[0].chipstack === 0 || this.players[1].chipstack === 0) return true;\n    return false;\n  }\n\n  showPot(){\n    let currPot = document.querySelector(`.table-felt-pot`);\n    currPot.innerText = `Current pot: ${this.pot}`;\n  }\n\n  render(){\n    this.setActions();\n    this.showPot();\n    this.players[0].render();\n    this.players[1].render();\n  }\n\n\n  setActions() {\n    debugger\n    const $outDiv = $(\"<div\");\n\n    let $foldDiv = $(\"<div\");\n    $foldDiv.data(\"action\", \"fold\");\n    $outDiv.append($foldDiv)\n\n    let $callDiv = $(\"<div\");\n    $callDiv.data(\"action\", \"call\");\n    $outDiv.append($callDiv)\n\n    let $betDiv = $(\"<div\");\n    $betDiv.data(\"action\", \"bet\");\n    $outDiv.append($betDiv)\n\n    this.$el.append($outDiv);\n  }\n}\n\nexport default Table;"],"sourceRoot":""}