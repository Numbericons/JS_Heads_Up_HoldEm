{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/pokersolver/pokersolver.js","webpack:///./src/index.js","webpack:///./src/playerLogic/computerplayer.js","webpack:///./src/playerLogic/humanplayer.js","webpack:///./src/pokerLogic/board.js","webpack:///./src/pokerLogic/card.js","webpack:///./src/pokerLogic/deck.js","webpack:///./src/pokerLogic/holdem.js","webpack:///./src/pokerLogic/table.js"],"names":["$","actionsCont","game","HoldEm","newGame","ComputerPlayer","position","chipstack","folded","chipsInPot","hand","comp","side","name","input","textSelect","document","querySelector","innerText","to_call","stack","pot","randNum","Math","random","bet","raise","genBetRaise","betInput","textInput","sb","playerName","playerChips","playerCard1","playerCard2","render","playerCards","HumanPlayer","promptSelect","promptText","Board","$el","players","bb","table","boardCards","deck","Deck","currPlayerPos","currBet","streetActions","currStreet","bindEvents","bind","otherPlayerPos","dealerButton","removeClass","handNum","length","addClass","resetVars","allIn","removeButtons","dealInPlayers","takeBlinds","hand1","Hand","solve","handToStrArr","concat","textBoard","hand2","outputString","winners","tie","winner","alert","descr","floor","handOver","winHand","loseHand","winPos","losePos","renderPlayers","i","card","unrender","player","playerHand","map","rank","suit","pos","revealed","draw","push","dealPlayerCard","otherPlayer","handChipDiff","blind","sbTotal","blindPlayer","bbTotal","dealCard","showBoardCard","currPot","response","action","ceil","currentPlayer","promptResponse","resolvePlayerPrompt","showDealerBtn","showPot","showBoard","setButtons","promptAction","chkBlindAllIn","promptPlayer","$outDiv","$foldDiv","data","html","append","$callDiv","value","$betAmtDiv","type","$betDiv","fold","callOrCheck","betOrRaise","betAmount","empty","abs","isSb","totalBet","Number","compBetRaise","$button","compAction","playerAction","determineWinner","betRaise","calcCompBetRaise","calcBetInput","resolvedAction","resolve_action","continueAction","toggleCurrPlayer","nextAction","handChipsEqual","multipleActions","showDown","nextStreet","forEach","revealCards","flopBool","dealFlop","stepStreet","unbind","on","event","currentTarget","Card","img_pos_x","img_pos_y","element","width","height","style","backgroundPosition","backgroundImage","borderRadius","marginLeft","backgroundSize","display","hide","backgroundPositionX","backgroundPositionY","cards_drawn","cards","newDeck","array","counter","index","temp","suits","values","j","pos_x","pos_y","shuffle","pop","unshift","initialChipstack","dealer_pos","Table","board","playHand","require","shift","nextHand","togglePlayers","resetPlayerVars","clearBoard"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,KAAK;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,KAAK;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,KAAK;AACrB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA,+B;AACA,SAAS;AACT,kC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0EAA0E;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,YAAY,KAAK;AACjB;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,kBAAkB;AAClC,gBAAgB,kBAAkB;AAClC,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,iDAAiD,KAAK;AACtD,gBAAgB,MAAM;AACtB,iDAAiD,KAAK;AACtD,gBAAgB,kBAAkB;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,MAAM;AACtB,gDAAgD,KAAK;AACrD,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;A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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n\n(function() {\n  'use strict';\n\n  // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n  /**\n   * Base Card class that defines a single card.\n   */\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    }\n\n    // TODO: Add a parameter to leave out the suit and update the this.descr calls.\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true;\n\n      // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      }\n      \n      // Get rank based on game.\n      var handRank = this.game.handValues.length;\n      for (var i=0; i<this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n      this.rank = handRank - i;\n\n      // Set up the pool of cards.\n      this.cardPool = cards.map(function(c) {\n        return (typeof c === 'string') ? new Card(c) : c;\n      });\n\n      // Fix the card ranks for wild cards, and sort.\n      for (var i=0; i<this.cardPool.length; i++) {\n        card = this.cardPool[i];\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n      this.cardPool = this.cardPool.sort(Card.sort);\n\n      // Create the arrays of suits and values.\n      var obj, obj1, key, key1, card;\n      for (var i=0; i<this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i];\n\n        // We do something special if this is a wild card.\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []);\n\n          // Add the value to the array for that type in the object.\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n      for (var i=0; i<=4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n    loseTo(hand) {\n      return (this.compare(hand) > 0);\n    }\n\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = (cards) ? cards.length : 0;\n\n      for (var i=0; i<this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i=0; i<this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j=0;\n          while (j<values.length && j<cards.length) {\n            if (cards[j].rank === values.length-1-j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n          wild.rank = values.length-1-j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n    resetWildCards() {\n      for (var i=0; i<this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n\n      picks = this.cardPool.filter(function(card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      });\n\n      // Account for remaining wild card when it must be ace.\n      if (this.game.wildStatus === 0) {\n        for (var i=0; i<picks.length; i++) {\n          var card = picks[i];\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n    toString() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards.join(', ');\n    }\n\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n    toArray() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards;\n    }\n\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return (this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0);\n    }\n\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n    static winners(hands) {\n      hands = hands.filter(function(h) {\n        return h.qualifiesHigh();\n      });\n\n      var highestRank = Math.max.apply(Math, hands.map(function(h) {\n        return h.rank;\n      }));\n\n      hands = hands.filter(function(h) {\n        return h.rank === highestRank;\n      });\n\n      hands = hands.filter(function(h) {\n        var lose = false;\n        for (var i=0; i<hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n\n      return hands;\n    }\n\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = (typeof game === 'string') ? new Game(game) : game;\n      cards = cards || [''];\n\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i=0; i<hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i=0; i<cards.length; i++) {\n        card = cards[i];\n        if (card.rank === -1) {\n          wilds.push(cards[i]);  \n        } else {\n          nonWilds.push(cards[i]);  \n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        } \n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n        var straight = new Straight(possibleStraight, this.game);\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<5; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i=0; i<this.values.length; i++) {\n          var cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards();\n\n      // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n        if (this.cards.length) {\n          var wildCount = 0;\n          for (var i=0; i<this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n          this.cards = this.cards.sort(Card.sort);\n          for (; wildCount<this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n          return true;\n        }\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps();\n\n      // Now add the wild cards, if any, and set the appropriate ranks\n      for (var i=0; i<this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < (values.length - 1)) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j=1; j<this.cards.length; j++) {\n            if (this.cards[j-1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j-1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n        this.cards = this.cards.sort(Card.sort);\n      }\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength-1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n      for (; i>0; i--) {\n        cardsList = [];\n        gapCount = 0;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          prevCard = cardsList[cardsList.length - 1];\n          diff = (prevCard) ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < (gapCount + diff + cardsList.length)) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += (diff - 1);\n          }\n        }\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      wheelCards = [];\n      wildCount = 0;\n      for (i = this.game.sfQualify-1; i>=0; i--) {\n        cardFound = false;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          if (card.rank < i) {\n            break;\n          }\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n          for (var j=0; j<this.wilds.length && this.cards.length<2; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i=0; i<this.cards.length; i++) {\n        var card = this.cards[i];\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n\n      return true;\n    }\n  }\n\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [\n        new StraightFlush(cards, new Game('paigowpokersf7')),\n        new StraightFlush(cards, new Game('paigowpokersf6')),\n        new StraightFlush(cards, this.game),\n        new Flush(cards, new Game('paigowpokersf7')),\n        new Flush(cards, new Game('paigowpokersf6')),\n        new Flush(cards, this.game),\n        new Straight(cards, new Game('paigowpokersf7')),\n        new Straight(cards, new Game('paigowpokersf6')),\n        new Straight(cards, this.game)\n      ];\n\n      for (var i=0; i<handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || (bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank)) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        }\n        // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]);\n\n      // In Pai Gow Poker, Banker takes any equal valued hands.\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        }\n        // Player wins hi, Banker wins lo; push\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      }\n\n      // Banker wins both; banker wins\n      return -1;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n      fullHand = fullHand.concat(hiHand.cardPool);\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n      fullHand = fullHand.concat(loHand.cardPool);\n\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n\n      return result;\n    }\n\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n\n      return result;\n    }\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null;\n\n      // Set values based on the game rules.\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  }\n\n  // Export the classes for node.js use.\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  }\n\n  // Add the classes to the window for browser use.\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n\n})();","import HoldEm from './pokerLogic/holdem';\n\n$(() => {\n  const actionsCont = $('.table-actions');\n  const game = new HoldEm(actionsCont);\n  game.newGame();\n});\n\n// $(() => {\n//   const rootEl = $('.ttt');\n//   const game = new Game();\n//   new View(game, rootEl);\n// });\n\n// import React from \"react\";\n// import ReactDom from \"react-dom\";\n// import App from \"../dist/App\"\n\n// const Root = () => {\n//   return (\n//     // <App />\n//   )\n// }\n\n// ReactDOM.render(element, document.getElementById('root'));\n\n// ReactDOM.render(<h1>Hello Poker world!</h1>, document.getElementById(\"root\"));\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   const game = new HoldEm;\n//   game.newGame();\n//   console.log(\"Game Over!\");\n// })\n\n\n\n","export default class ComputerPlayer {\n  constructor(position, chipstack) {\n    this.position = position;\n    this.chipstack = chipstack;\n    this.folded = false;\n    this.chipsInPot = 0;\n    this.hand = [];\n    this.comp = true;\n    (position === 'sb') ? this.side = 'right' : this.side = 'left';\n    (this.side === 'right') ? this.name = 'Seat 1' : this.name = 'Seat 2';\n  }\n\n  text(input) {\n    let textSelect = document.querySelector(\".table-actions-text\");\n    textSelect.innerText = input;\n  }\n\n  promptText(input) {\n    // let promptSelect = document.querySelector(\".table-actions-prompt\");\n    // promptSelect.innerText = input;\n  }\n\n  promptAction(to_call) {\n    // this.text(`${this.name}, your hand is ${this.hand[0].rank} ${this.hand[1]}.suit`)\n    // if (to_call === 0) {\n    //   this.promptText(`${this.name}, enter 'check', 'fold', or 'bet' will bet the amount in the box to the right`)\n    // } else {\n    //   this.promptText(`It costs ${to_call} to call. Enter 'call', 'fold', 'raise' will raise the amount in the box to the right`)\n    // }\n  }\n  genBetRaise(to_call, stack, pot){\n    let randNum = Math.random()\n    if (to_call === 0) {\n      let bet = randNum * stack;\n      return ['betRaise', bet];\n    } else {\n      let raise = randNum * stack;\n      if (raise < to_call * 2) raise = to_call * 2;\n      return ['betRaise', raise];\n    }\n  }\n\n  promptResponse(to_call, stack, pot){\n    let randNum = Math.random()\n    if (randNum < .3333) {\n      if (to_call > 0) {\n        return ['fold'];\n      } else {\n        if (randNum < .16666) {\n          return ['check'];\n        } else {\n          return this.genBetRaise(to_call, stack, pot);\n        }\n      }\n    } else if (randNum < .6666) {\n      if (to_call > 0) {\n        return ['call'];\n      } else {\n        return ['check'];\n      }\n    } else {\n      if (to_call === 0) {\n        return this.genBetRaise(to_call, stack, pot);\n      } else {\n        return ['call']\n      }\n    }\n  }\n\n  resolve_action(to_call, betInput, textInput, sb = 0) {\n    if (textInput === 'check') {\n      return 0;\n    } else if (textInput === 'fold') {\n      this.folded = true;\n      return null;\n    } else if (textInput === 'call') {\n      this.chipstack -= to_call;\n      this.chipsInPot += to_call;\n      return to_call;\n    } else {\n      this.chipstack -= betInput + sb;\n      this.chipsInPot += betInput + sb;\n      return betInput + sb;\n    }\n  }\n\n  playerName() {\n    let playerName = document.querySelector(`.player-info-name-${this.side}`);\n    playerName.innerText = `${this.name}`;\n  }\n\n  playerChips() {\n    let playerChips = document.querySelector(`.player-info-chips-${this.side}`);\n    playerChips.innerText = `${this.chipstack} chips`\n  }\n\n  playerCards() {\n    if (this.hand[0]) {\n      let playerCard1 = document.querySelector(`.player-info-cards-${this.side}-1`);\n      let playerCard2 = document.querySelector(`.player-info-cards-${this.side}-2`);\n      this.hand[0].render(playerCard1, \"51%\", \"67%\");\n      this.hand[1].render(playerCard2, \"51%\", \"67%\");\n    }\n  }\n\n  render() {\n    this.playerName();\n    this.playerChips();\n    this.playerCards();\n  }\n\n  resetVars() {\n    this.folded = false;\n    this.chipsInPot = 0;\n    this.hand = [];\n  }\n}","export default class HumanPlayer {\n  constructor(position, chipstack){\n    this.position = position;\n    this.chipstack = chipstack;\n    this.folded = false;\n    this.chipsInPot = 0;\n    this.hand = [];\n    this.comp = false;\n    (position === 'sb') ? this.side = 'right' : this.side = 'left';\n    (this.side === 'right') ? this.name = 'Seat 1' : this.name = 'Seat 2';\n  }\n\n  // text(input){\n  //   let textSelect = document.querySelector(\".table-actions-text\");\n  //   textSelect.innerText = input;\n  // }\n\n  promptText(input){\n    let promptSelect = document.querySelector(\".table-actions-prompt\");\n    promptSelect.innerText = input;\n  }\n\n  promptAction(to_call){\n    // this.text(`${this.name}, your hand is ${this.hand[0].rank}${this.hand[0].suit} ${this.hand[1].rank}${this.hand[1].suit}`)\n    if (to_call === 0) {\n      this.promptText(`${this.name}, enter 'check', 'fold', or 'bet'`)\n    } else {\n      this.promptText(`It costs $${to_call} to call`)\n    }\n  }\n\n  resolve_action(to_call, betInput, textInput, sb = 0) {\n    if (textInput === 'check') {\n      return 0;\n    } else if (textInput === 'fold') {\n      this.folded = true;\n      return null;\n    } else if (textInput === 'call') {\n      this.chipstack -= to_call;\n      this.chipsInPot += to_call;\n      return to_call;\n    } else {\n      this.chipstack -= betInput + sb;\n      this.chipsInPot += betInput + sb;\n      return betInput + sb;\n    }\n  }\n\n  playerName() {\n    let playerName = document.querySelector(`.player-info-name-${this.side}`);\n    playerName.innerText = `${this.name}`;\n  }\n\n  playerChips() {\n    let playerChips = document.querySelector(`.player-info-chips-${this.side}`);\n    playerChips.innerText = `${this.chipstack} chips`\n  }\n\n  playerCards() {\n    if (this.hand[0]) {\n      let playerCard1 = document.querySelector(`.player-info-cards-${this.side}-1`);\n      let playerCard2 = document.querySelector(`.player-info-cards-${this.side}-2`);\n      this.hand[0].render(playerCard1, \"51%\", \"67%\");\n      this.hand[1].render(playerCard2, \"51%\", \"67%\");\n    }\n  }\n\n  render(){\n    this.playerName();\n    this.playerChips();\n    this.playerCards();\n  }\n\n  resetVars(){\n    this.folded = false;\n    this.chipsInPot = 0;\n    this.hand = [];\n  }\n}","import Deck from './deck'\nexport default class Board {\n  constructor($el, players, sb = 50, bb = 100, table) {\n    this.boardCards = [];\n    this.deck = new Deck;\n    this.players = players;\n    this.sb = sb;\n    this.bb = bb;\n    this.table = table;\n    this.pot = 0;\n    this.currPlayerPos = 0;\n    this.$el = $el; \n    this.currBet = this.sb;\n    this.streetActions = [];\n    this.currStreet = 'preflop';\n\n    this.bindEvents = this.bindEvents.bind(this);\n  }\n\n  currentPlayer() {\n    return this.players[this.currPlayerPos];\n  }\n\n  otherPlayer() {\n    let otherPlayerPos = (this.currPlayerPos === 0) ? 1 : 0;\n    return this.players[otherPlayerPos];\n  }\n\n  resetVars() {\n    this.deck = new Deck;\n    this.boardCards = [];\n    this.pot = 0;\n    this.currPlayerPos = 0;\n    this.currBet = this.sb;\n    this.streetActions = [];\n    this.currStreet = 'preflop';\n  }\n\n  showDealerBtn() {\n    let dealerButton = $('#table-felt-dealer-btn');\n    dealerButton.removeClass();\n    if (this.table.handNum % 2 === 0) {\n      (this.boardCards.length === 0) ? dealerButton.addClass(\"table-felt-dealer-btn-left\") : dealerButton.addClass(\"table-felt-dealer-btn-left-board\");\n    } else {\n      (this.boardCards.length === 0) ? dealerButton.addClass(\"table-felt-dealer-btn-right\") : dealerButton.addClass(\"table-felt-dealer-btn-right-board\");\n    }\n  }\n\n  resetPlayerVars() {\n    this.players[0].resetVars();\n    this.players[1].resetVars();\n  }\n\n  playHand() {\n    if (this.allIn()) {\n      debugger\n      this.table.removeButtons();\n      return;\n    }  \n    this.dealInPlayers();\n    this.takeBlinds();\n    this.render();\n  }\n\n  determineWinner() {\n    var hand1 = Hand.solve(this.handToStrArr(this.players[0]).concat(this.textBoard()));\n    var hand2 = Hand.solve(this.handToStrArr(this.players[1]).concat(this.textBoard()));\n    this.outputString = (this.boardCards.length > 0) ? `On a board of ${this.textBoard()}, ` : `Preflop, `\n    var winners = Hand.winners([hand1, hand2]);\n    if (!this.players[0].folded && !this.players[1].folded && winners.length === 2) {\n      return this.tie(hand1);\n    } else if (this.players[1].folded || (!this.players[0].folded && winners[0] === hand1)) {\n      this.winner(hand1, hand2, 0, 1);\n    } else {\n      this.winner(hand2, hand1, 1, 0);\n    }\n  }\n\n  tie(hand) {\n    alert(this.outputString + `the hand resulted in a tie. Splitting the pot of $${this.pot} with ${hand.descr}!`)\n    this.players[0].chipstack += Math.floor(this.pot / 2);\n    this.players[1].chipstack += Math.floor(this.pot / 2);\n    if (!this.pot % 2 === 0) {\n      if (Math.random() < .5) {\n        this.players[0].chipstack += 1;\n      } else {\n        this.players[1].chipstack += 1;\n      }\n    }\n    this.table.handOver();\n  }\n\n  winner(winHand, loseHand, winPos, losePos) {\n    this.outputString += `${this.players[winPos].name} wins the pot of $${this.pot}`;\n    if (!this.players[losePos].folded) this.outputString += ` with hand: ${winHand.descr}`;\n    if (!this.players[losePos].chipstack === 0) this.outputString += `${this.players[losePos].name} lost with with hand: ${loseHand.descr}`;\n    this.players[winPos].chipstack += this.pot;\n    this.renderPlayers();\n    alert(this.outputString);\n    // this.renderPlayers().then(res => {\n    //   alert(this.outputString);\n    // })\n    this.table.handOver();\n  }\n\n  clearBoard() {\n    for (let i = 0; i < this.boardCards.length; i++) {\n      let card = document.querySelector(`.table-felt-board-card-${i + 1}`);\n      this.boardCards[i].unrender(card);\n    }\n  }\n\n  handToStrArr(player) {\n    let playerHand = player.hand.map(card => {\n      return `${card.rank}${card.suit}`;\n    })\n    return playerHand;\n  }\n\n  dealPlayerCard(pos, revealed) {\n    let card = this.deck.draw();\n    card.revealed = revealed;\n    this.players[pos].hand.push(card);\n  }\n\n  dealInPlayers() {\n    this.dealPlayerCard(1, !this.players[1].comp);\n    this.dealPlayerCard(0, !this.players[0].comp);\n    this.dealPlayerCard(1, !this.players[1].comp);\n    this.dealPlayerCard(0, !this.players[0].comp);\n  }\n\n  chkBlindAllIn(){\n    if (this.otherPlayer().chipstack === 0) {\n      return this.handChipDiff();\n    } else {\n      return this.currBet; \n    }\n  }\n\n  blindPlayer(player, blind){\n    if (player.chipstack > blind) {\n      player.chipstack -= blind;\n      player.chipsInPot = blind;\n      return blind;\n    } else {\n      player.chipsInPot = player.chipstack;\n      player.chipstack = 0;\n      return player.chipsInPot;\n    }\n  }\n\n  takeBlinds() {\n    const sbTotal = this.blindPlayer(this.players[0], this.sb);\n    const bbTotal = this.blindPlayer(this.players[1], this.bb);\n    this.pot = sbTotal + bbTotal;\n  }\n\n  dealCard() {\n    this.currPlayerPos = 1;\n    this.boardCards.push(this.deck.draw());\n  }\n\n  dealFlop() {\n    this.currPlayerPos = 1;\n    for (let i = 0; i < 3; i++) {\n      this.dealCard();\n    }\n  }\n\n  textBoard() {\n    let textBoard = this.boardCards.map(card => {\n      return `${card.rank}${card.suit}`\n    })\n    return textBoard;\n  }\n\n  showBoardCard(pos){\n    let card = document.querySelector(`.table-felt-board-card-${pos+1}`);\n    this.boardCards[pos].render(card, \"17.5%\", \"52%\")\n  }\n\n  showBoard() {\n    for (let i = 0; i < this.boardCards.length; i++) {\n      // setTimeout(() => {\n        this.showBoardCard(i);\n      // }, 1000);\n    }\n  }\n\n  toggleCurrPlayer() {\n    if (this.currPlayerPos === 0) {\n      this.currPlayerPos = 1;\n    } else {\n      this.currPlayerPos = 0;\n    }\n  }\n\n  // remainingPlayers() {\n  //   if (this.players[0].folded === true || this.players[1].folded === true) return false;\n  //   return true;\n  // }\n\n  allIn() {\n    if (this.players[0].chipstack === 0 || this.players[1].chipstack === 0) return true;\n    return false;\n  }\n\n  showPot() {\n    let currPot = document.querySelector(`.table-felt-pot`);\n    currPot.innerText = `Current pot: $${this.pot}`;\n  }\n\n  resolvePlayerPrompt(response) {\n    if (response[0] === 'fold') {\n      this.action(null, 'fold');\n    } else if (response[0] === 'call') {\n      this.action(null, 'call');\n    } else if (response[0] === 'check') {\n      this.action(null, 'check');\n    } else {\n      this.action(null, 'bet', Math.ceil(response[1]));\n    }\n  }\n\n  promptPlayer() {\n    let response = this.currentPlayer().promptResponse(this.currBet, this.currentPlayer().chipstack);\n    if (response) {\n      this.resolvePlayerPrompt(response);\n    }\n  }\n\n  renderPlayers(){\n    this.players[0].render();\n    this.players[1].render();\n  }\n\n  render() {\n    this.showDealerBtn();\n    this.showPot();\n    this.showBoard();\n    this.renderPlayers();\n    this.setButtons();\n    this.bindEvents();\n    if (this.currentPlayer().hand[0]) this.currentPlayer().promptAction(this.chkBlindAllIn(), this.currentPlayer.chipstack);\n    if (this.currentPlayer().comp && (this.streetActions.length < 2 || this.handChipDiff() !== 0)) this.promptPlayer();\n  }\n\n  fold($outDiv) {\n    let $foldDiv = $(\"<button>\");\n    $foldDiv.addClass(\"actions-cont-text\");\n    $foldDiv.data(\"action\", \"fold\");\n    $foldDiv.html('FOLD');\n    $outDiv.append($foldDiv)\n  }\n\n  callOrCheck($outDiv) {\n    let $callDiv = $(\"<button>\");\n    $callDiv.addClass(\"actions-cont-text\")\n    if (this.currBet === 0) {\n      $callDiv.data(\"action\", \"check\");\n      $callDiv.html('CHECK');\n    } else {\n      $callDiv.data(\"action\", \"call\");\n      $callDiv.html('CALL');\n    }\n\n    $outDiv.append($callDiv)\n  }\n\n  betAmount($outDiv) {\n    let value;\n    if (this.currBet > 0) {\n      if (this.currBet === this.sb) {\n        value = this.bb * 2;\n      } else {\n        value = this.currBet * 2;\n      }\n    } else {\n      value = this.bb\n    }\n    let $betAmtDiv = $(\"<input/>\", {\n      type: 'text',\n      class: 'actions-cont-bet-amt',\n      value: `${value}`\n    })\n    $outDiv.append($betAmtDiv)\n  }\n\n  betOrRaise($outDiv) {\n    let $betDiv = $(\"<button>\");\n    $betDiv.addClass(\"actions-cont-text\")\n\n    if (this.currBet === 0) {\n      $betDiv.data(\"action\", \"bet\");\n      $betDiv.html('BET');\n    } else {\n      $betDiv.data(\"action\", \"raise\");\n      $betDiv.html('RAISE');\n    }\n    $outDiv.append($betDiv)\n  }\n\n  setButtons() {\n    const $outDiv = $(\"<div>\");\n    $outDiv.addClass(\"actions-cont\")\n\n    this.fold($outDiv);\n    this.callOrCheck($outDiv);\n    if (!this.allIn() && this.currentPlayer().chipstack > this.currBet) {\n      this.betOrRaise($outDiv);\n      this.betAmount($outDiv);\n    }\n\n    this.$el.empty();\n    this.$el.append($outDiv);\n  }\n\n  handChipDiff() {\n    return Math.abs(this.players[0].chipsInPot - this.players[1].chipsInPot);\n  }\n\n  calcBetInput(isSb) {\n    let betInput = $('.actions-cont-bet-amt');\n    if (betInput.length === 0) return 0;\n    let totalBet = Number(betInput[0].value);\n    if (totalBet > this.currentPlayer().chipstack) totalBet = this.currentPlayer().chipstack - isSb;\n    if (totalBet > this.otherPlayer().chipstack) totalBet = this.otherPlayer().chipstack + this.handChipDiff() - isSb;\n    return totalBet;\n  }\n\n  calcCompBetRaise(compBetRaise, isSb) {\n    let totalBet;\n    if (compBetRaise > this.currentPlayer().chipstack) {\n      totalBet = this.currentPlayer().chipstack - isSb;\n    } else if (compBetRaise > this.otherPlayer().chipstack) {\n      totalBet = this.otherPlayer().chipstack + this.handChipDiff() - isSb;\n    } else {\n      totalBet = compBetRaise;\n    }\n    return totalBet;\n  }\n\n  action($button, compAction, compBetRaise) {\n    let playerAction;\n    playerAction = ($button) ? $button.data().action : compAction;\n    if (playerAction === 'fold') {\n      this.currentPlayer().folded = true;\n      return this.determineWinner();\n    }\n    let isSb = (this.currStreet === 'preflop' && this.streetActions.length === 0) ? this.sb : 0;\n    let betRaise;\n    if (compBetRaise) {\n      if (compBetRaise < this.bb) compBetRaise = this.bb;\n      betRaise = this.calcCompBetRaise(compBetRaise, isSb);\n    } else {\n      betRaise = this.calcBetInput(isSb);\n    }\n    let resolvedAction = this.currentPlayer().resolve_action(this.handChipDiff(), betRaise, playerAction, isSb);\n    if (resolvedAction) {\n      this.pot += resolvedAction\n    }\n    this.streetActions = this.streetActions.concat(resolvedAction);\n    this.continueAction();\n  }\n\n  continueAction() {\n    this.currBet = this.handChipDiff();\n    this.toggleCurrPlayer();\n    this.render();\n    this.nextAction();\n  }\n\n  nextAction() {\n    let handChipsEqual = this.handChipDiff() === 0;\n    let multipleActions = this.streetActions.length > 1;\n    if (this.streetActions[this.streetActions - 1] === 'fold') {\n      this.determineWinner();\n    } else if (handChipsEqual) {\n      if (this.allIn()) {\n        this.showDown();\n        this.determineWinner();\n      } else if (this.currStreet === 'river' && multipleActions) {\n        this.determineWinner();\n      } else if (multipleActions) {\n        this.nextStreet();\n      }\n    }\n  }\n\n  revealCards() {\n    this.players.forEach(player => {\n      player.hand[0].revealed = true;\n      player.hand[1].revealed = true;\n    })\n  }\n\n  showDown() {\n    this.revealCards();\n    while (this.boardCards.length < 5) {\n      this.dealCard();\n      this.showBoard();\n    }\n  }\n\n  stepStreet(flopBool) {\n    (flopBool) ? this.dealFlop() : this.dealCard();\n    this.showBoard();\n    if (!this.allIn()) this.render();\n  }\n\n  nextStreet() {\n    this.streetActions = [];\n    this.currBet = 0;\n    if (this.currStreet === 'preflop') {\n      this.currStreet = 'flop';\n      this.stepStreet(true);\n    } else if (this.currStreet === 'flop') {\n      this.currStreet = 'turn';\n      this.stepStreet();\n    } else if (this.currStreet === 'turn') {\n      this.currStreet = 'river';\n      this.stepStreet();\n    }\n  }\n\n  bindEvents() {\n    this.$el.unbind();\n    this.$el.on(\"click\", \"button\", (event => {\n      const $button = $(event.currentTarget);\n      this.action($button);\n    }));\n  }\n}","// DISP_SUITS = [\"\\u2660\", \"\\u2661\", \"\\u2662\", \"\\u2663\"]\nexport default class Card {\n  constructor(rank, suit, img_pos_x, img_pos_y, revealed) {\n    this.suit = suit;\n    this.rank = rank;\n    this.img_pos_x = img_pos_x;\n    this.img_pos_y = img_pos_y;\n    this.revealed = revealed;\n  }\n\n  display(element, width, height){\n    element.style.backgroundPosition = `${this.img_pos_x}px ${this.img_pos_y}px`;\n    element.style.width = width; //40%    .1143  .57 * 140 px   80%\n    element.style.height = height; //80%  .16\n    element.style.backgroundImage = 'url(\"./image/deck400.png\")';\n    element.style.borderRadius = \"7px\";\n    element.style.marginLeft = \"10px\";\n  }\n\n  hide(element, width, height){\n    element.style.backgroundPosition = ' -2px -4px';\n    element.style.width = width; \n    element.style.height = height;\n    element.style.backgroundImage = 'url(\"./image/cardback_red_acorn2.jpg\")';\n    element.style.borderRadius = \"7px\";\n    element.style.marginLeft = \"10px\";\n    element.style.backgroundSize = \"75px 112px\";\n  }\n\n  render(element, width, height){\n    (this.revealed) ? this.display(element, width, height) : this.hide(element, width, height)\n  }\n\n  unrender(element){\n    element.style.backgroundPositionX = \"0px\";\n    element.style.backgroundPositionY = \"0px\";\n    element.style.width = \"0%\";\n    element.style.height = \"0%\";\n    element.style.borderRadius = \"7px\";\n    element.style.marginLeft = \"10px\";\n  }\n\n  show() {\n    return `${this.rank}${this.suit}`\n  }\n}","import Card from './card';\nexport default class Deck {\n  constructor(){\n    this.cards_drawn = 0;\n    this.cards = this.newDeck();\n  }\n\n  shuffle(array){\n    let counter = array.length;\n\n    while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n    }\n    return array;\n  }\n\n  newDeck(){\n    let suits = [\"s\", \"h\", \"d\", \"c\"];\n    let values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\"];\n    let deck = [];\n    for (let i = 0; i < suits.length; i++) {\n      for (let j = 0; j < values.length; j++) {\n        let pos_x = j * -78 - 6;\n        const pos_y = i * -114 - 8;\n        deck.push(new Card(values[j], suits[i], pos_x, pos_y, true));\n      }\n    }\n    return this.shuffle(deck);\n  }\n\n  draw(){\n    if (this.cards_drawn > 0 && this.cards_drawn % 52 == 0) {\n      this.cards = this.shuffle(this.cards);\n    }\n    this.cards_drawn += 1;\n    return this.cards.pop();\n  }\n\n  returnCard(card){\n    this.cards.unshift(card);\n  }\n}","import Table from \"./table\";\nimport HumanPlayer from \"../playerLogic/humanplayer\";\nimport ComputerPlayer from \"../playerLogic/computerplayer\";\n\nclass HoldEm {\n  constructor($el, initialChipstack = 5000) {\n    this.$el = $el;\n    this.initialChipstack = initialChipstack;\n    this.players = [new HumanPlayer(\"sb\", 5000), new ComputerPlayer(\"bb\", 5000)];\n    this.dealer_pos = 0;\n    this.table = new Table($el, this.players);\n  }\n\n  render(){\n    this.table.board.render();\n  }\n\n  playHand(){\n    this.table.board.playHand();\n  }\n  newGame(){\n      this.render();\n      this.playHand();\n  }\n}\n\nexport default HoldEm;\n","import Deck from \"./deck.js\";\nimport Board from \"./board.js\";\nconst Hand = require('pokersolver').Hand;\n\nclass Table {\n  constructor($el, players, sb = 50, bb = 100){\n    this.board = new Board($el, players, sb, bb, this)\n    this.boardCards = [];\n    this.players = players;\n    this.handNum = 1;\n  }\n\n  resetPlayerVars() {\n    this.players[0].resetVars();\n    this.players[1].resetVars();\n  }\n\n  togglePlayers() {\n    this.board.players.push(this.board.players.shift());\n    this.board.players[0].position = 'sb';\n    this.board.players[1].position = 'bb';\n  }\n\n  handOver(){\n    if (this.board.currentPlayer().chipstack === 0) {\n      this.removeButtons();\n      this.board.otherPlayer().promptText(`${this.board.otherPlayer().name} has won the match!`);\n    } else if (this.board.otherPlayer().chipstack === 0) {\n      this.removeButtons();\n      this.board.currentPlayer().promptText(`${this.board.currentPlayer().name} has won the match!`);\n    } else {\n      this.nextHand();\n    }\n  }\n\n  removeButtons(){\n    this.board.$el.empty();\n  }\n\n  playHand(){\n    this.board.playHand();\n  }\n\n  nextHand(){\n    this.togglePlayers();\n    this.resetPlayerVars();\n    this.board.clearBoard();\n    this.board.resetVars();\n    this.handNum += 1;\n    this.playHand();\n  }\n\n  // fold($outDiv) {\n  //   let $foldDiv = $(\"<button>\");\n  //   $foldDiv.addClass(\"actions-cont-text\");\n  //   $foldDiv.data(\"action\", \"fold\");\n  //   $foldDiv.html('FOLD');\n  //   $outDiv.append($foldDiv)\n  // }\n\n  // callOrCheck($outDiv) {\n  //   let $callDiv = $(\"<button>\");\n  //   $callDiv.addClass(\"actions-cont-text\")\n  //   if (this.currBet === 0) {\n  //     $callDiv.data(\"action\", \"check\");\n  //     $callDiv.html('CHECK');\n  //   } else {\n  //     $callDiv.data(\"action\", \"call\");\n  //     $callDiv.html('CALL');\n  //   }\n\n  //   $outDiv.append($callDiv)\n  // }\n\n  // betAmount($outDiv) {\n  //   let value;\n  //   if (this.currBet > 0) {\n  //     if (this.currBet === this.sb) {\n  //       value = this.bb * 2;\n  //     } else {\n  //       value = this.currBet * 2;\n  //     }\n  //   } else {\n  //     value = this.bb\n  //   }\n  //   let $betAmtDiv = $(\"<input/>\", {\n  //     type: 'text',\n  //     class: 'actions-cont-bet-amt',\n  //     value: `${value}`\n  //   })\n  //   $outDiv.append($betAmtDiv)\n  // }\n\n  // betOrRaise($outDiv) {\n  //   let $betDiv = $(\"<button>\");\n  //   $betDiv.addClass(\"actions-cont-text\")\n\n  //   if (this.currBet === 0) {\n  //     $betDiv.data(\"action\", \"bet\");\n  //     $betDiv.html('BET');\n  //   } else {\n  //     $betDiv.data(\"action\", \"raise\");\n  //     $betDiv.html('RAISE');\n  //   }\n  //   $outDiv.append($betDiv)\n  // }\n\n  // setButtons() {\n  //   const $outDiv = $(\"<div>\");\n  //   $outDiv.addClass(\"actions-cont\")\n\n  //   this.fold($outDiv);\n  //   this.callOrCheck($outDiv);\n  //   if (!this.allIn() && this.currentPlayer().chipstack > this.currBet) {\n  //     this.betOrRaise($outDiv);\n  //     this.betAmount($outDiv);\n  //   }\n\n  //   this.$el.empty();\n  //   this.$el.append($outDiv);\n  // }\n\n  // bindEvents() {\n  //   this.$el.unbind();\n  //   this.$el.on(\"click\", \"button\", (event => {\n  //     const $button = $(event.currentTarget);\n  //     this.action($button);\n  //   }));\n  // }\n}\n\nexport default Table;"],"sourceRoot":""}